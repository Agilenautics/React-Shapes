User Registration:

The user provides their email and password to register.
The handleSignup function handles this by calling createUserWithEmailAndPassword from Firebase.

Upon successful registration:

Firebase generates a token for the user, which is retrieved via user.getIdTokenResult().
The access token (and optionally, the refresh token) is stored in browser cookies using the document.cookie method.
Token Storage:

Tokens are stored in the browser's cookies.
You've set up the cookies with considerations for security using flags like Secure, HttpOnly, and SameSite.
Apollo Client Setup:

The Apollo Client is set up to communicate with your GraphQL API.
Before making requests to the API, the Apollo Client fetches the access token from the cookies.
This token is attached to the request headers, specifically the authorization header, in the format Bearer <token>.
API Middleware - Authentication:

When a request reaches your GraphQL API endpoint, it first goes through the authMiddleware.
This middleware extracts the token from the authorization header.
The token is then passed to Firebase's verifyIdToken method for validation.
If valid, the decoded token information is attached to the req object for potential use in the GraphQL resolvers or elsewhere in the application.
If invalid, a 403 Unauthorized response is sent back.
GraphQL Endpoint:

After the middleware validation, if the token is valid, the request reaches the Apollo GraphQL server.
The context of the Apollo server is set up to contain the decoded token, allowing the resolvers to have access to it.
The server then processes the GraphQL query or mutation and sends back the appropriate response.
Error Handling:

Any error in the process, be it token validation, mismatched passwords during registration, etc., results in appropriate error messages sent back to the client.
Specific error details, such as issues with token decoding or validation, are logged for debugging purposes.
Security Measures:
